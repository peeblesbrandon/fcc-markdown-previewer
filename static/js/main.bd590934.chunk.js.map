{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Editor","props","handleChange","bind","event","this","onMarkdownChange","target","value","markdownText","className","id","onChange","rows","React","Component","Previewer","marked","setOptions","gfm","convertedText","console","log","dangerouslySetInnerHTML","__html","App","state","input","handleMarkdownChange","setState","process","Navbar","fixed","bg","variant","Brand","Accordion","defaultActiveKey","Card","Header","Toggle","as","Button","eventKey","Collapse","Body","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mYAuBeA,G,wDAnBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,yDAKNC,GACTC,KAAKJ,MAAMK,iBAAiBF,EAAMG,OAAOC,S,+BAIzC,IAAMC,EAAeJ,KAAKJ,MAAMQ,aAChC,OACI,yBAAKC,UAAU,uBACX,8BAAUC,GAAG,SAASC,SAAUP,KAAKH,aAAcM,MAAOC,EAAcI,KAAK,KAAKH,UAAU,2B,GAdvFI,IAAMC,Y,yBCqBZC,E,uKAbPC,IAAOC,WAAW,CACdC,KAAK,IAET,IAAMC,EAAgBH,IAAOZ,KAAKJ,MAAMQ,cAExC,OADAY,QAAQC,IAAIF,GAER,yBAAKV,UAAU,sCACX,wBAAIC,GAAG,UAAUY,wBAAyB,CAAEC,OAAQJ,U,GAd5CN,IAAMC,WC6EfU,E,kDA1Eb,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CACXC,MAAM,gyBAkBR,EAAKC,qBAAuB,EAAKA,qBAAqBzB,KAA1B,gBArBX,E,iEAwBEM,GACnB,OAAOJ,KAAKwB,SAAS,CACnBF,MAAOlB,M,+BAMT,OADAY,QAAQC,IAAI,0BAA2BQ,2BAErC,yBAAKpB,UAAU,kCACb,kBAACqB,EAAA,EAAD,CAAQC,MAAM,SAASC,GAAG,OAAOC,QAAQ,QACvC,kBAACH,EAAA,EAAOI,MAAR,CAAczB,UAAU,qBACtB,wBAAIA,UAAU,WAAd,sBACA,uBAAGA,UAAU,4CAAb,0FAGJ,kBAAC0B,EAAA,EAAD,CAAWC,iBAAiB,KAC1B,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAa7B,UAAU,OACrB,kBAAC0B,EAAA,EAAUI,OAAX,CAAkBC,GAAIC,IAAQR,QAAQ,QAAQS,SAAS,KACrD,4CAGJ,kBAACP,EAAA,EAAUQ,SAAX,CAAoBD,SAAS,KAC3B,kBAACL,EAAA,EAAKO,KAAN,CAAWnC,UAAU,WACnB,kBAAC,EAAD,CAAQD,aAAcJ,KAAKqB,MAAMC,MAAOrB,iBAAkBD,KAAKuB,2BAKvE,kBAACQ,EAAA,EAAD,CAAWC,iBAAiB,KAC1B,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAa7B,UAAU,WACrB,kBAAC0B,EAAA,EAAUI,OAAX,CAAkBC,GAAIC,IAAQR,QAAQ,QAAQS,SAAS,KACrD,+CAGJ,kBAACP,EAAA,EAAUQ,SAAX,CAAoBD,SAAS,KAC3B,kBAACL,EAAA,EAAKO,KAAN,KACE,kBAAC,EAAD,CAAWpC,aAAcJ,KAAKqB,MAAMC,YAK5C,wBAAIhB,GAAG,aAAP,0C,GArEUG,IAAMC,WCMJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQC,SAAUxB,2BAEhB,kBAAC,IAAD,CAAOyB,OAAK,EAACC,KAAI,IAAOC,UAAWhC,MAGvCiC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,c","file":"static/js/main.bd590934.chunk.js","sourcesContent":["import React from 'react';\nimport './Editor.css';\n\nclass Editor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.props.onMarkdownChange(event.target.value);\n    }\n\n    render() {\n        const markdownText = this.props.markdownText;\n        return (\n            <div className=\"container-fluid p-0\">\n                <textarea id=\"editor\" onChange={this.handleChange} value={markdownText} rows=\"10\" className=\"form-control h-80\" />\n            </div>\n        );\n    }\n}\n\nexport default Editor;","import React from 'react';\nimport './Previewer.css';\nimport marked from 'marked';\n\nclass Previewer extends React.Component {\n    // remove constructor bc not needed\n    // constructor(props) {\n    //     super(props);\n    // }\n\n    render() {\n        marked.setOptions({\n            gfm: true\n        });\n        const convertedText = marked(this.props.markdownText);\n        console.log(convertedText);\n        return (\n            <div className=\"container-fluid text-break m-0 p-0\">\n                <td id=\"preview\" dangerouslySetInnerHTML={{ __html: convertedText }}></td>\n            </div>\n            );\n    }\n}\n\nexport default Previewer;","import React from 'react';\nimport './App.css';\nimport { Navbar, Accordion, Card, Button } from 'react-bootstrap';\nimport Editor from '../Editor/Editor';\nimport Previewer from '../Previewer/Previewer';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \n`# Welcome to the Markdown Previewer\\r\n#### Created by Brandon Peebles\\r\n[Here's a link to this app's GitHub repo](https://github.com/peeblesbrandon/fcc-markdown-previewer)\\r\n## Enter your GitHub flavored markdown here.\\r\n## Then, look at the Previewer bar below to see it converted into HTML and rendered.\\n\n\\`Here's some inline code\\`\\r\n\\`\\`\\`\nHere's a code block.\\r\nIt goes on multiple lines\\n\n\\`\\`\\`\n* We've got list items\\r\n* Just like this\\n\n> And blockquotes\\r\n> Like this\\n\n**Last, but not least... we have this floofy dog**\\n\n![cute dog](https://img.pixers.pics/pho_wat(s3:700/FO/28/69/47/29/700_FO28694729_8534ba4d363506946e6324a7bf2a0111.jpg,639,700,cms:2018/10/5bd1b6b8d04b8_220x50-watermark.png,over,419,650,jpg)/wall-murals-coton-de-tulear-puppy-4-months-old-standing.jpg.jpg)`\n    }\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n  }\n\n  handleMarkdownChange(markdownText) {\n    return this.setState({\n      input: markdownText\n    });\n  }\n\n  render() {\n    console.log(\"This is the process.env\", process.env.PUBLIC_URL)\n    return (\n      <div className=\"container fluid m-0 p-0 vw-100\">\n        <Navbar fixed=\"sticky\" bg=\"dark\" variant=\"dark\">\n          <Navbar.Brand className=\"text-break vw-100\">\n            <h4 className=\"d-block\">Markdown Previewer</h4>\n            <p className=\"d-block text-light text-muted text-break\">To get started converting markdown text, tap below to expand the Editor or Previewer</p>\n          </Navbar.Brand>\n        </Navbar>\n        <Accordion defaultActiveKey=\"1\">\n          <Card>\n            <Card.Header className=\"p-0\">\n              <Accordion.Toggle as={Button} variant=\"light\" eventKey=\"0\">\n                <strong>Editor</strong>\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body className=\"p-0 m-0\">\n                <Editor markdownText={this.state.input} onMarkdownChange={this.handleMarkdownChange}/>\n              </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n        <Accordion defaultActiveKey=\"1\">\n          <Card>\n            <Card.Header className=\"p-0 m-0\">\n              <Accordion.Toggle as={Button} variant=\"light\" eventKey=\"0\">\n                <strong>Previewer</strong>\n              </Accordion.Toggle>\n            </Card.Header>\n            <Accordion.Collapse eventKey=\"0\">\n              <Card.Body>\n                <Previewer markdownText={this.state.input} />\n            </Card.Body>\n            </Accordion.Collapse>\n          </Card>\n        </Accordion>\n        <em id=\"signature\">Created by Brandon Peebles - 2020</em>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router basename={process.env.PUBLIC_URL}>\n      {/* <App /> */}\n      <Route exact path={`/`} component={App} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}